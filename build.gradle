buildscript {
	ext {
		springBootVersion = '2.0.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

group = 'com.concrete.desafiojava'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {	
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.projectlombok:lombok')
	compile('org.springframework.boot:spring-boot-starter-hateoas')
	compile('org.springframework.boot:spring-boot-devtools')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('io.jsonwebtoken:jjwt:0.7.0')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('com.h2database:h2')
	//compile('net.logstash.logback:logstash-logback-encoder')
	//compile('com.github.jsimone:webapp-runner:8.5.11.3')
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task stage(type: Copy, dependsOn: [clean, build]) {
    from jar.archivePath
    into project.rootDir
    rename {
        'app.war'
    }
}
stage.mustRunAfter(clean)

clean << {
    project.file('app.war').delete()
}